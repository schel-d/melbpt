@use "css-template/import" as template;
@use "line-colors" as line-colors;

@mixin line-diagram($gap, $notch-y, $content-class) {
  $notch-thickness: 0.4rem;
  $stem-thickness: 0.4rem;
  $notch-width: 0.3rem;

  @include line-colors.accent-classes;
  gap: $gap;
  .loop,
  .branch {
    gap: $gap;
  }

  .stop {
    $vertical-padding: $gap * 0.5;

    position: relative;
    margin-top: $vertical-padding * -1;
    margin-bottom: $vertical-padding * -1;

    .#{$content-class} {
      padding-top: calc($vertical-padding);
      padding-bottom: calc($vertical-padding);
    }
    > :not(.#{$content-class}) {
      pointer-events: none;
    }

    .notch {
      position: absolute;
      z-index: 1;
      top: calc($vertical-padding + $notch-y);
      width: $stem-thickness + $notch-width;
      height: $notch-thickness;
      transform: translate($stem-thickness * -0.5, $notch-thickness * -0.5);
      background-color: var(--color-accent);

      &.major {
        width: 1.5rem;
        height: 0.5rem;
        transform: translate(-0.75rem, -0.25rem);
        background-color: var(--color-stop-notch-inner);
        border: 0.15rem solid var(--color-stop-notch-outer);
        border-radius: 0.5rem;
      }
    }
    .stem {
      position: absolute;
      z-index: 0;
      background-color: var(--color-accent);
      top: $vertical-padding + $notch-y + $notch-thickness * 0.5;
      bottom: $vertical-padding;
      width: $stem-thickness;
      transform: translate($stem-thickness * -0.5, 0rem);

      &.join {
        bottom: $notch-thickness * 0.5 - ($notch-y + $gap * 0.5);
      }
    }

    &.express .stem {
      top: $vertical-padding + $notch-y - $notch-thickness * 0.5;
    }
    &.transparent {
      opacity: 0.5;
    }
  }
  .branch {
    position: relative;
    margin-top: calc(0.5rem);
    margin-bottom: calc(0.5rem);
    .branch-stem {
      position: absolute;
      background-color: var(--color-accent);
      top: $notch-y - 0.5rem - $notch-thickness * 0.5;
      bottom: $notch-thickness * 0.5 - ($notch-y + $gap + 0.5rem);
      width: $stem-thickness;
      transform: translate($stem-thickness * -0.5, 0rem);
    }
    .branch-split {
      position: absolute;
      width: 3rem;
      height: 1.5rem;
      color: var(--color-accent);
      top: calc($notch-y - 1.5rem);
    }
  }
  .loop {
    position: relative;
    margin-top: calc(1.15rem - $notch-y);
    margin-bottom: calc(0.5rem);
    .loop-stem {
      position: absolute;
      background-color: var(--color-accent);
      top: $notch-y;
      bottom: $notch-thickness * 0.5 - ($notch-y + $gap + 0.5rem);
      width: $stem-thickness;
      transform: translate($stem-thickness * -0.5, 0rem);
    }
    .loop-cap {
      position: absolute;
      width: 3rem;
      height: 1.5rem;
      color: var(--color-accent);
      top: calc($notch-y - 1.5rem);
    }
    .loop-join {
      position: absolute;
      width: 3rem;
      height: 1.5rem;
      color: var(--color-accent);
      bottom: calc($notch-thickness - 1.9rem);
    }
  }

  > .stop:last-child .notch:not(.major),
  .branch > .stop:last-child .notch:not(.major),
  > .stop:first-child .notch:not(.major) {
    $notch-thickness-terminus: $notch-width * 2 + $stem-thickness;
    width: $notch-thickness-terminus;
    transform: translate(
      $notch-thickness-terminus * -0.5,
      $notch-thickness * -0.5
    );
  }
}
